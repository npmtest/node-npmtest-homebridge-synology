{"/home/travis/build/npmtest/node-npmtest-homebridge-synology/test.js":"/* istanbul instrument in package npmtest_homebridge_synology */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-synology/lib.npmtest_homebridge_synology.js":"/* istanbul instrument in package npmtest_homebridge_synology */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_synology = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_synology = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-synology/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-synology && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_synology */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_synology\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_synology.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_homebridge_synology.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_synology.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_homebridge_synology.__dirname +\n                    '/lib.npmtest_homebridge_synology.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-synology/node_modules/homebridge-synology/index.js":"var Service, Characteristic;\nvar Synology = require('./lib/synology');\nvar inherits = require('util').inherits;\n\n\nmodule.exports = function (homebridge) {\n    Service = homebridge.hap.Service;\n    Characteristic = homebridge.hap.Characteristic;\n\n    fixInheritance(SynologyAccessory.CpuLoad, Characteristic);\n    fixInheritance(SynologyAccessory.DiskUsage, Characteristic);\n    fixInheritance(SynologyAccessory.StatsService, Service);\n\n    homebridge.registerAccessory('homebridge-synology', 'Synology', SynologyAccessory);\n};\n\n\nfunction fixInheritance(subclass, superclass) {\n    var proto = subclass.prototype;\n    inherits(subclass, superclass);\n    subclass.prototype.parent = superclass.prototype;\n    for (var mn in proto) {\n        subclass.prototype[mn] = proto[mn];\n    }\n}\n\n\nfunction SynologyAccessory(log, config) {\n    this.log = log;\n    this.config = config;\n    this.name = config['name'];\n\n    this.synology = new Synology({\n      ip: config['ip'],\n      mac: config['mac'],\n      secure: config['secure'] || null,\n      port: config['port'] || null,\n      version: config['version'],\n      user: config['user'] || config['account'],\n      passwd: config['password'],\n      timeout: config['timeout'] || null\n    });\n}\n\n\nSynologyAccessory.CpuLoad = function () {\n    Characteristic.call(this, 'CPU Load', '12d21a89-9466-4548-8edd-b05e6b93c23e');\n    this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: Characteristic.Units.PERCENTAGE,\n        perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n};\n\n\nSynologyAccessory.DiskUsage = function () {\n    Characteristic.call(this, 'Disk Usage', 'de3c3d3d-6f86-446c-9dac-535858736ddd');\n    this.setProps({\n        format: Characteristic.Formats.UINT8,\n        unit: Characteristic.Units.PERCENTAGE,\n        perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n    });\n    this.value = this.getDefaultValue();\n};\n\n\nSynologyAccessory.StatsService = function (displayName, subtype) {\n    Service.call(this, displayName, '9d0ea4eb-31db-47e9-83ef-302193e669d8', subtype);\n    this.addCharacteristic(new SynologyAccessory.DiskUsage());\n    this.addOptionalCharacteristic(new SynologyAccessory.CpuLoad());\n};\n\n\nSynologyAccessory.prototype.getPowerState = function (callback) {\n    var that = this;\n\n    that.synology.getPowerState(function (err, state) {\n        if (!err) {\n            that.log('current power state is: ' + state);\n            callback(null, state);\n        } else {\n            that.log(err);\n            callback(err);\n        }\n    });\n};\n\n\nSynologyAccessory.prototype.setPowerState = function (powerState, callback) {\n    var that = this;\n\n    if (powerState) { //turn on\n        that.synology.wakeUp(function (err) {\n            if (!err) {\n                that.log('Diskstation woked up!');\n                callback(null);\n            } else {\n                that.log('Something went wrong: ' + err);\n                callback(err);\n            }\n        });\n    }\n\n    else { //turn off\n        that.synology.shutdown(function (err) {\n            if (!err) {\n                that.log(\"Shutting down Diskstation\")\n                callback(null);\n            } else {\n                that.log(\"Error shutting down your Diskstation\")\n                callback(err);\n            }\n        });\n    }\n};\n\n\nSynologyAccessory.prototype.getCpuLoad = function (callback) {\n    var that = this;\n\n    that.synology.getCpuLoad(function (err, data) {\n        if (!err) {\n            that.log('current cpu load: %s %', data);\n            callback(null, data);\n        } else {\n            that.log(err);\n            callback(null, 0); //testing\n        }\n    });\n};\n\n\nSynologyAccessory.prototype.getDiskUsage = function (callback) {\n    var that = this;\n\n    that.synology.getDiskUsage(function (err, data) {\n        if (!err) {\n            that.log('current volume usage: %s %', data);\n            callback(null, data);\n        } else {\n            that.log(err);\n            callback(null, 0); //testing\n        }\n    });\n};\n\n\nSynologyAccessory.prototype.getSystemTemp = function (callback) {\n    var that = this;\n    that.synology.getSystemTemp(function (err, data) {\n        if (!err) {\n            that.log('current system temp: %s °C', data);\n            callback(null, data);\n        } else {\n            that.log(err);\n            callback(null, 0); //testing\n        }\n    });\n};\n\n\nSynologyAccessory.prototype.getServices = function () {\n    var informationService = new Service.AccessoryInformation();\n\n    informationService\n        .setCharacteristic(Characteristic.Name, this.name)\n        .setCharacteristic(Characteristic.Manufacturer, 'Synology');\n\n    var switchService = new Service.Switch(this.name);\n    switchService.getCharacteristic(Characteristic.On)\n        .on('get', this.getPowerState.bind(this))\n        .on('set', this.setPowerState.bind(this));\n\n    var statsService = new SynologyAccessory.StatsService('Stats Service');\n    statsService.getCharacteristic(SynologyAccessory.DiskUsage)\n        .on('get', this.getDiskUsage.bind(this));\n    statsService.getCharacteristic(SynologyAccessory.CpuLoad)\n        .on('get', this.getCpuLoad.bind(this));\n\n    var tempService = new Service.TemperatureSensor('System Temperature');\n    tempService.getCharacteristic(Characteristic.CurrentTemperature)\n        .on('get', this.getSystemTemp.bind(this));\n\n    var services = [informationService];\n\n    if ('disabled' in this.config) {\n        if (this.config.disabled.indexOf(\"switch\") === -1) { services.push(switchService); }\n        if (this.config.disabled.indexOf(\"stats\") === -1) { services.push(statsService); }\n        if (this.config.disabled.indexOf(\"temp\") === -1) { services.push(tempService); }\n    } else {\n        var services = [informationService, switchService, tempService, statsService];\n    }\n\n    return services;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-synology/node_modules/homebridge-synology/lib/synology.js":"/**\n * synology.js functions for homebridge\n * 12.03.2016 by stfnhmplr\n */\n\nvar request = require('request');\nvar wol = require('wake_on_lan');\n\nvar Synology = function(params) {\n    this.ip = params.ip;\n    this.mac = params.mac;\n    this.secure = params.secure || false;\n    this.port = params.port || (this.secure ? 5001 : 5000);\n    this.timeout = parseInt(params.timeout) || 5000; //request timeout\n    this.version = parseInt(params.version) ||  6;\n\n    this.user = params.user;\n    this.passwd = params.passwd;\n    this.auth = {\n        sid: '', //session id\n        time: '', //unix time\n        timeout: 15 * 60 //in sec\n    };\n\n    this.url = 'http' + (this.secure ? 's' : '') + '://' + this.ip + ':' + this.port;\n};\n\n\n/**\n * check if the sid is still valid\n * @returns {string|boolean}\n */\nSynology.prototype.isLoggedIn = function() {\n    return (this.auth.sid && (this.auth.time + this.auth.timeout) > (new Date / 1e3 | 0)) ? true : false;\n};\n\n\n/**\n * Login to your diskstation\n * @return {Promise}\n */\nSynology.prototype._login = function() {\n    var that = this;\n\n    return new Promise(function(resolve, reject) {\n        if(that.isLoggedIn()) {\n            resolve(\"Still logged in\")\n        } else {\n            var options = {\n                url: that.url + '/webapi/auth.cgi',\n                timeout: that.timeout,\n                qs: {\n                    api: 'SYNO.API.Auth',\n                    method: 'login',\n                    version: 3,\n                    account: that.user,\n                    passwd: that.passwd,\n                    session: 'homebridge-synology-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10),\n                    format: 'sid'\n                }\n            };\n\n            request.get(options, function(err, res, body) {\n                if(!err) {\n                    var json = JSON.parse(body);\n                    that.auth.sid = json.data.sid;\n                    that.auth.time = (new Date / 1e3 | 0);\n                    resolve(\"Login successfull\");\n                } else {\n                    reject(\"Can't Login to Diskstation\")\n                }\n            });\n        }\n    });\n};\n\n\n/**\n * get the power State of your Diskstation\n * @param callback\n */\nSynology.prototype.getPowerState = function(callback) {\n    that = this;\n\n    var options = {\n        url: that.url + '/webman/index.cgi',\n        method: 'GET',\n        timeout: that.timeout\n    }\n\n    request(options, function(err, res) {\n        if (!err && res.statusCode == 200) {\n            callback(null, true);\n        } else {\n            callback(null, false);\n        }\n    });\n};\n\n\n/**\n * Wake on LAN support for Diskstation\n * wol has to be enabled\n * @param callback\n */\nSynology.prototype.wakeUp = function(callback) {\n    var that = this;\n\n    wol.wake(that.mac, function(err) {\n        if (!err) {\n            callback(null)\n        } else {\n            callback(err);\n        }\n    });\n};\n\n\n/**\n * Shutdown your Diskstation\n * @param callback\n */\nSynology.prototype.shutdown = function(callback) {\n    var that = this;\n\n    that._login().then(function() {\n        var apiUrl = (that.version >= 6) ? '/webapi/entry.cgi' : '/webapi/dsm/system.cgi';\n\n        var options = {\n            url: that.url + apiUrl,\n            qs: {\n                api: (that.version >= 6) ? 'SYNO.Core.System' : 'SYNO.DSM.System',\n                version: 1,\n                method: 'shutdown',\n                _sid: that.auth.sid\n            },\n            method: 'GET',\n        };\n\n        request(options, function(err, res, body) {\n            (!err && res.statusCode == 200 && JSON.parse(body).success) ? callback(null): callback(err);\n        });\n    }).catch(function(err) {\n        callback(err);\n    });\n\n};\n\n\n/**\n * gets the average disk temperature\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nSynology.prototype.getDiskTemp = function(callback) {\n    var that = this;\n\n    that._login().then(function(res) {\n        var apiUrl = (that.version >= 6) ? '/webapi/entry.cgi' : '/webapi/dsm/info.cgi';\n        var options = {\n            url: that.url + apiUrl,\n            qs: {\n                api: (that.version >= 6) ? 'SYNO.Core.System' : '',\n                version: 1,\n                method: (that.version >= 6) ? 'info' : 'getinfo',\n                type: 'storage',\n                _sid: that.auth.sid\n            },\n            method: 'GET'\n        };\n\n        request(options, function(err, res, body) {\n            if (!err && res.statusCode == 200) {\n                var json = JSON.parse(body);\n                if (json.success) {\n                    var temp = 0;\n                    for (var i = json.data.hdd_info.length; i--;) {\n                        temp += json.data.hdd_info[i].temp;\n                    }\n                    temp = Math.round(temp / json.data.hdd_info.length);\n                    callback(null, temp);\n                } else {\n                    callback(err);\n                }\n            } else {\n                callback(err);\n            }\n        });\n    }).catch(function(err) {\n        callback(err);\n    });\n}\n\n\n/**\n * System temperature of your diskstation\n * If not available, it returns your average disk temperature\n * @param callback\n */\nSynology.prototype.getSystemTemp = function(callback) {\n    var that = this;\n\n    that._login().then(function() {\n        var apiUrl = (that.version >= 6) ? '/webapi/entry.cgi' : '/webapi/dsm/info.cgi';\n        var options = {\n            url: that.url + apiUrl,\n            qs: {\n                api: (that.version >= 6) ? 'SYNO.Core.System' : 'SYNO.DSM.Info',\n                version: 1,\n                method: (that.version >= 6) ? 'info' : 'getinfo',\n                _sid: that.auth.sid\n            },\n            method: 'GET'\n        };\n        request(options, function(err, res, body) {\n            if (!err && res.statusCode == 200) {\n                var json = JSON.parse(body);\n                if (json.success && typeof json.data.temperature !== 'undefined') {\n                    callback(null, json.data.temperature);\n                } else {\n                    that.getDiskTemp(function(error, data) {\n                        if(!error) {\n                            callback(null, data)\n                        } else {\n                            callback(\"An error occured while getting SystemTemp: \" + error)\n                        }\n                    });\n                }\n            } else {\n                callback(\"An error occured while getting SystemTemp: \" + err);\n            }\n        });\n    }).catch(function(err) {\n        callback(\"An error occured while getting SystemTemp: \" + err);\n    });\n};\n\n\n/**\n * returns the current cpu load\n * @param callback\n */\nSynology.prototype.getCpuLoad = function(callback) {\n    var that = this;\n\n    that._login().then(function() {\n\n        var apiUrl = (that.version >= 6) ? '/webapi/entry.cgi' : '/webapi/dsm/system_loading.cgi';\n        var options = {\n            url: that.url + apiUrl,\n            qs: {\n                api: (that.version >= 6) ? 'SYNO.Core.System.Utilization' : 'SYNO.DSM.SystemLoading',\n                version: 1,\n                method: (that.version >= 6) ? 'get' : 'getinfo',\n                type: 'current',\n                resource: ['cpu'],\n                _sid: that.auth.sid\n            },\n            method: 'GET'\n        };\n\n        request(options, function(err, res, body) {\n            if (!err && res.statusCode == 200) {\n                var json = JSON.parse(body);\n                if (json.success) {\n                    if (that.version >= 6) {\n                        var load = json.data.cpu['other_load'] +\n                            json.data.cpu['system_load'] +\n                            json.data.cpu['user_load'];\n                    } else {\n                        load = Math.round(json.data.cpu.user * 100);\n                    }\n                    callback(null, load);\n                } else {\n                    callback(\"An error occured while getting CpuLoad: \" + json.error.code);\n                }\n            } else {\n                callback(\"An error occured while getting CpuLoad: \" + err);\n            }\n        });\n    }).catch(function(err) {\n        callback(\"An error occured while getting CpuLoad: \" + err);\n    })\n};\n\n\n/**\n * Gets the current disk/volume usage quote\n * returns the average if there are more than one volume\n * @param callback\n */\nSynology.prototype.getDiskUsage = function(callback) {\n    var that = this;\n\n    that._login().then(function() {\n        var apiUrl = (that.version >= 6) ? '/webapi/entry.cgi' : '/webapi/dsm/volume.cgi';\n        var options = {\n            url: that.url + apiUrl,\n            qs: {\n                api: (that.version >= 6) ? 'SYNO.Core.System' : 'SYNO.DSM.Volume',\n                version: 1,\n                method: (that.version >= 6) ? 'info' : 'list',\n                type: 'storage', //only dsm >= 6\n                _sid: that.auth.sid\n            },\n            method: 'GET'\n        };\n\n        request(options, function(err, res, body) {\n            if (!err && res.statusCode == 200) {\n                var json = JSON.parse(body);\n\n                //dsm version 5.x\n                if (json.success && that.version < 6) {\n                    var used = 0,\n                        total = 0;\n                    for (var i = json.data.volumes.length; i--;) {\n                        used += json.data.volumes[i].used;\n                        total += json.data.volumes[i].total;\n                    }\n                    callback(null, Math.round(used / total * 100));\n\n                    //dsm version 6.x\n                } else if (json.success && that.version >= 6) {\n                    var used = 0,\n                        total = 0;\n                    for (var i = json.data.vol_info.length; i--;) {\n                        used += json.data.vol_info[i].used_size;\n                        total += json.data.vol_info[i].total_size;\n                    }\n                    callback(null, Math.round(used / total * 100));\n\n                } else {\n                    callback(\"An error occured while getting DiskUsage: \" + json.error.code);\n                }\n            } else {\n                callback(\"An error occured while getting DiskUsage: \" + err);\n            }\n        });\n    }).catch(function(err) {\n        callback(err);\n    });\n};\n\nmodule.exports = Synology;\n"}